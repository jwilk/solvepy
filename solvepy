#!/usr/bin/env python3
# encoding=UTF-8

# Copyright Â© 2022-2024 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

import argparse
import codecs
import locale
import operator
import string

import sympy
import sympy.parsing.sympy_parser as sympy_parser

0_0  # Python >= 3.6 is required

sympy_transformations = (*sympy_parser.standard_transformations, sympy_parser.convert_equals_signs)

def get_locale_encoding():
    return locale.nl_langinfo(locale.CODESET)

def cmp_encodings(*encodings):
    return operator.eq(
        *(codecs.lookup(e).name for e in encodings)
    )

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument('-v', '--var', action='append')
    ap.add_argument('eqns', metavar='EQN', nargs='+')
    options = ap.parse_args()
    ns = {
        '#eq': sympy.Eq,
        '#noteq': sympy.Ne,
        '#int': sympy.Integer,
        '#float': sympy.Float,
    }
    exec('from sympy import *', ns)
    for var in options.var or ():
        if not var.isidentifier():
            ap.error(f'{var!r} is not a valid identifier')
        ns[var] = sympy.Symbol(var)
    for var in string.ascii_lowercase:
        if var not in ns:
            ns[var] = sympy.Symbol(var)
    eqns = []
    for eqn in options.eqns:
        eqn = sympy.parse_expr(eqn, global_dict=dict(ns), transformations=sympy_transformations)
        eqns += [eqn]
    results = sympy.solve(eqns)
    if not isinstance(results, list):
        results = [results]
    use_unicode = cmp_encodings(get_locale_encoding(), 'UTF-8')
    for n, result in enumerate(results):
        if n > 0:
            print()
        sympy.pprint(result, use_unicode=use_unicode)

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
